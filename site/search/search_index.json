{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pygame Widgets A helper module for common widgets that may be required in developing applications with Pygame. Prerequisites Python 3 >= 3.7 Pygame >= 2.0.0 Installation Ensure that Python 3 and pip are installed and added to your environment PATH. python -m pip install pygame-widgets Open a Python console and run the following command. import pygame_widgets If you receive no errors, the installation was successful. Usage Common Button ButtonArray TextBox Slider Toggle ProgressBar Dropdown ComboBox Animations How to Contribute Any contribution to this project would be greatly appreciated. This can include: Finding errors or bugs and creating a new issue Addressing active issues Adding functionality Improving documentation If applicable, you should make any changes in a forked repository and then create a pull request once the changes are complete and preferably tested if possible. Note: If writing any code, please attempt to follow the Code Style Guide","title":"Pygame Widgets"},{"location":"#pygame-widgets","text":"A helper module for common widgets that may be required in developing applications with Pygame.","title":"Pygame Widgets"},{"location":"#prerequisites","text":"Python 3 >= 3.7 Pygame >= 2.0.0","title":"Prerequisites"},{"location":"#installation","text":"Ensure that Python 3 and pip are installed and added to your environment PATH. python -m pip install pygame-widgets Open a Python console and run the following command. import pygame_widgets If you receive no errors, the installation was successful.","title":"Installation"},{"location":"#usage","text":"Common Button ButtonArray TextBox Slider Toggle ProgressBar Dropdown ComboBox Animations","title":"Usage"},{"location":"#how-to-contribute","text":"Any contribution to this project would be greatly appreciated. This can include: Finding errors or bugs and creating a new issue Addressing active issues Adding functionality Improving documentation If applicable, you should make any changes in a forked repository and then create a pull request once the changes are complete and preferably tested if possible. Note: If writing any code, please attempt to follow the Code Style Guide","title":"How to Contribute"},{"location":"animations/","text":"Animations Create an animation by using the default Translate or Resize, inheriting from AnimationBase, or using AnimationBase directly. Example Usage import pygame from pygame_widgets import Button, Resize pygame.init() win = pygame.display.set_mode((600, 600)) button = Button(win, 100, 100, 300, 150) animation = Resize(button, 3, 200, 200) animation.start() run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) button.listen(events) button.draw() pygame.display.update() Over 3 seconds, the width of the button was changed from 300 to 200 and its height from 150 to 200. Since it is performed on a separate thread, the button is still able to function during the animation.","title":"Animations"},{"location":"animations/#animations","text":"Create an animation by using the default Translate or Resize, inheriting from AnimationBase, or using AnimationBase directly.","title":"Animations"},{"location":"animations/#example-usage","text":"import pygame from pygame_widgets import Button, Resize pygame.init() win = pygame.display.set_mode((600, 600)) button = Button(win, 100, 100, 300, 150) animation = Resize(button, 3, 200, 200) animation.start() run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) button.listen(events) button.draw() pygame.display.update() Over 3 seconds, the width of the button was changed from 300 to 200 and its height from 150 to 200. Since it is performed on a separate thread, the button is still able to function during the animation.","title":"Example Usage"},{"location":"button/","text":"Button A button that allows fully customisable text, images, colours and functions. Example Usage Note: See example import pygame from pygame_widgets import Button # Set up Pygame pygame.init() win = pygame.display.set_mode((600, 600)) # Creates the button with optional parameters button = Button( # Mandatory Parameters win, # Surface to place button on 100, # X-coordinate of top left corner 100, # Y-coordinate of top left corner 300, # Width 150, # Height # Optional Parameters text='Hello', # Text to display fontSize=50, # Size of font margin=20, # Minimum distance between text/image and edge of button inactiveColour=(255, 0, 0), # Colour of button when not being interacted with hoverColour=(200, 0, 0), # Colour of button when being hovered over pressedColour=(0, 255, 0), # Colour of button when being clicked radius=20, # Radius of border corners (leave empty for not curved) onClick=lambda: print('Click') # Function to call when clicked on ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) # Allows button to check for clicks/events button.listen(events) # Renders button to screen button.draw() pygame.display.update() This button will be placed at (100, 100) with a width of 300 and a height of 150, display the text 'Hello' with font size 50, leaving a margin of 20 and a radius of 20. When hovered over, the button changes to a darker red. When clicked, the button will change colour from red to green and 'Click' will be printed to the console. Optional Parameters Parameter Description Type Default inactiveColour Default colour when not pressed or hovered over. (int, int, int) (150, 150, 150) pressedColour Colour when pressed. (int, int, int) (100, 100, 100) hoverColour Colour when hovered over. (int, int, int) (125, 125, 125) shadowDistance Distance to projected shadow. Set to 0 if no shadow desired. int 0 shadowColour Colour of shadow (int, int, int) (210, 210, 180) onClick Function to be called when clicked. function None onClickParams Parameters to be fed into onClick function. (*any) () onRelease Function to be called when released. function None onReleaseParams Parameters to be fed into onRelease function. (*any) () textColour Colour of text. (int, int, int) (0, 0, 0) fontSize Size of text. int 20 text String to be displayed. str '' font Font of text. pygame.font.Font Calibri textHAlign Horizontal alignment of text. Can be 'centre', 'left' or 'right'. str 'centre' textVAlign Vertical alignment of text. Can be 'centre', 'top' or 'bottom'. str 'centre' margin Minimum distance between text / image and edge. int 20 image Image to be displayed. pygame.Surface None imageHAlign Horizontal alignment of image. Can be 'centre', 'left' or 'right'. str 'centre' imageVAlign Vertical alignment of image. Can be 'centre', 'top' or 'bottom'. str 'centre' radius Border radius. Set to half of width for circular button. Set to 0 for no radius. int 0","title":"Button"},{"location":"button/#button","text":"A button that allows fully customisable text, images, colours and functions.","title":"Button"},{"location":"button/#example-usage","text":"Note: See example import pygame from pygame_widgets import Button # Set up Pygame pygame.init() win = pygame.display.set_mode((600, 600)) # Creates the button with optional parameters button = Button( # Mandatory Parameters win, # Surface to place button on 100, # X-coordinate of top left corner 100, # Y-coordinate of top left corner 300, # Width 150, # Height # Optional Parameters text='Hello', # Text to display fontSize=50, # Size of font margin=20, # Minimum distance between text/image and edge of button inactiveColour=(255, 0, 0), # Colour of button when not being interacted with hoverColour=(200, 0, 0), # Colour of button when being hovered over pressedColour=(0, 255, 0), # Colour of button when being clicked radius=20, # Radius of border corners (leave empty for not curved) onClick=lambda: print('Click') # Function to call when clicked on ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) # Allows button to check for clicks/events button.listen(events) # Renders button to screen button.draw() pygame.display.update() This button will be placed at (100, 100) with a width of 300 and a height of 150, display the text 'Hello' with font size 50, leaving a margin of 20 and a radius of 20. When hovered over, the button changes to a darker red. When clicked, the button will change colour from red to green and 'Click' will be printed to the console.","title":"Example Usage"},{"location":"button/#optional-parameters","text":"Parameter Description Type Default inactiveColour Default colour when not pressed or hovered over. (int, int, int) (150, 150, 150) pressedColour Colour when pressed. (int, int, int) (100, 100, 100) hoverColour Colour when hovered over. (int, int, int) (125, 125, 125) shadowDistance Distance to projected shadow. Set to 0 if no shadow desired. int 0 shadowColour Colour of shadow (int, int, int) (210, 210, 180) onClick Function to be called when clicked. function None onClickParams Parameters to be fed into onClick function. (*any) () onRelease Function to be called when released. function None onReleaseParams Parameters to be fed into onRelease function. (*any) () textColour Colour of text. (int, int, int) (0, 0, 0) fontSize Size of text. int 20 text String to be displayed. str '' font Font of text. pygame.font.Font Calibri textHAlign Horizontal alignment of text. Can be 'centre', 'left' or 'right'. str 'centre' textVAlign Vertical alignment of text. Can be 'centre', 'top' or 'bottom'. str 'centre' margin Minimum distance between text / image and edge. int 20 image Image to be displayed. pygame.Surface None imageHAlign Horizontal alignment of image. Can be 'centre', 'left' or 'right'. str 'centre' imageVAlign Vertical alignment of image. Can be 'centre', 'top' or 'bottom'. str 'centre' radius Border radius. Set to half of width for circular button. Set to 0 for no radius. int 0","title":"Optional Parameters"},{"location":"buttonarray/","text":"ButtonArray A collection of buttons with similar properties. Example Usage Note: See example import pygame from pygame_widgets import ButtonArray pygame.init() win = pygame.display.set_mode((600, 600)) buttonArray = ButtonArray(win, 50, 50, 500, 500, (2, 2), border=100, texts=('1', '2', '3', '4') ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) buttonArray.listen(events) buttonArray.draw() pygame.display.update() Mandatory Parameters Note: Mandatory parameters must be supplied in order. Parameter Description Type shape Number of columns and rows of buttons (columns, rows). (int, int) Optional Parameters Note: Optional parameters of ButtonArray are similar to those of Button. Parameter Description Type Default colour Background colour of array. (int, int, int) (210, 210, 180) border Thickness between buttons and between the edges of array and buttons. int 10 topBorder Thickness between top of array and top of button. Overrides border. int border bottomBorder Thickness between bottom of array and bottom of button. Overrides border. int border leftBorder Thickness between left of array and left of button. Overrides border. int border rightBorder Thickness between right of array and right of button. Overrides border. int border separationThickness Thickness between buttons. Overrides border. int border","title":"ButtonArray"},{"location":"buttonarray/#buttonarray","text":"A collection of buttons with similar properties.","title":"ButtonArray"},{"location":"buttonarray/#example-usage","text":"Note: See example import pygame from pygame_widgets import ButtonArray pygame.init() win = pygame.display.set_mode((600, 600)) buttonArray = ButtonArray(win, 50, 50, 500, 500, (2, 2), border=100, texts=('1', '2', '3', '4') ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) buttonArray.listen(events) buttonArray.draw() pygame.display.update()","title":"Example Usage"},{"location":"buttonarray/#mandatory-parameters","text":"Note: Mandatory parameters must be supplied in order. Parameter Description Type shape Number of columns and rows of buttons (columns, rows). (int, int)","title":"Mandatory Parameters"},{"location":"buttonarray/#optional-parameters","text":"Note: Optional parameters of ButtonArray are similar to those of Button. Parameter Description Type Default colour Background colour of array. (int, int, int) (210, 210, 180) border Thickness between buttons and between the edges of array and buttons. int 10 topBorder Thickness between top of array and top of button. Overrides border. int border bottomBorder Thickness between bottom of array and bottom of button. Overrides border. int border leftBorder Thickness between left of array and left of button. Overrides border. int border rightBorder Thickness between right of array and right of button. Overrides border. int border separationThickness Thickness between buttons. Overrides border. int border","title":"Optional Parameters"},{"location":"combobox/","text":"ComboBox A dropdown menu allowing the selection of various elements using a search bar. It is similar to Dropdown but includes a TextBox that allows searching of options. The parameters of the TextBox can be made different from the ones of the dropdown if they are specified in the textboxKwargs parameter. import pygame from pygame_widgets import ComboBox, Button pygame.init() win = pygame.display.set_mode((600, 600)) comboBox = ComboBox( win, 120, 10, 250, 50, name='Select Color', choices=pygame.colordict.THECOLORS.keys(), maxResults=4, font=pygame.font.SysFont('calibri', 30), borderRadius=3, colour=(0, 200, 50), direction='down', textHAlign='left' ) def output(): comboBox.textBar.colour = comboBox.getText() button = Button( win, 10, 10, 100, 50, text='Set Color', fontSize=30, margin=15, inactiveColour=(200, 0, 100), pressedColour=(0, 255, 0), radius=5, onClick=output, font=pygame.font.SysFont('calibri', 18), textVAlign='bottom' ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) comboBox.listen(events) comboBox.draw() button.listen(events) button.draw() pygame.display.update() This is a classic combo box. The current selected text can be accessed through the getText() methods. It returns the current text in the search bar. Mandatory Parameters Note: Mandatory parameters must be supplied in order. Parameter Description Type choices Choices to appear in the list list of str Optional Parameters Parameter Description Type Default direction Expansion direction. Can be 'down', 'up', 'left' or 'right'. str down inactiveColour Default colour when not pressed or hovered over. (int, int, int) (150, 150, 150) pressedColour Colour when pressed. (int, int, int) (100, 100, 100) hoverColour Colour when hovered over. (int, int, int) (125, 125, 125) maxChoices Maximum number of choices to display int len(choices) searchAlgo Algorithm to be used to search through choices. function(str, list) -> list ComboBox._defaultSearch onSelected Function to be called when a search choice is selected. function None onSelectedParams Parameters to be fed into onSelected function. (*any) () onStartSearch Function to be called when a search is started by user (clicking on the search box). function None onStartSearchParams Parameters to be fed into onStartSearch function. (*any) () onStopSearch Function to be called when a search is stopped (clicking outside the search dropdown, or selecting a choice). function None onStopSearchParams Parameters to be fed into onStopSearch function. (*any) () textColour Colour of text. (int, int, int) (0, 0, 0) fontSize Size of text. int 20 font Font of text. pygame.font.Font sans-serif textHAlign Horizontal alignment of text. Can be 'centre', 'left' or 'right'. str 'centre' borderColour Colour of border. (int, int, int) (0, 0, 0) borderThickness Thickness of border. int 3 borderRadius Border radius. Set to 0 for no radius. int 0 textboxKwargs Optional different parameters only for the TextBox . dict {}","title":"ComboBox"},{"location":"combobox/#combobox","text":"A dropdown menu allowing the selection of various elements using a search bar. It is similar to Dropdown but includes a TextBox that allows searching of options. The parameters of the TextBox can be made different from the ones of the dropdown if they are specified in the textboxKwargs parameter. import pygame from pygame_widgets import ComboBox, Button pygame.init() win = pygame.display.set_mode((600, 600)) comboBox = ComboBox( win, 120, 10, 250, 50, name='Select Color', choices=pygame.colordict.THECOLORS.keys(), maxResults=4, font=pygame.font.SysFont('calibri', 30), borderRadius=3, colour=(0, 200, 50), direction='down', textHAlign='left' ) def output(): comboBox.textBar.colour = comboBox.getText() button = Button( win, 10, 10, 100, 50, text='Set Color', fontSize=30, margin=15, inactiveColour=(200, 0, 100), pressedColour=(0, 255, 0), radius=5, onClick=output, font=pygame.font.SysFont('calibri', 18), textVAlign='bottom' ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) comboBox.listen(events) comboBox.draw() button.listen(events) button.draw() pygame.display.update() This is a classic combo box. The current selected text can be accessed through the getText() methods. It returns the current text in the search bar.","title":"ComboBox"},{"location":"combobox/#mandatory-parameters","text":"Note: Mandatory parameters must be supplied in order. Parameter Description Type choices Choices to appear in the list list of str","title":"Mandatory Parameters"},{"location":"combobox/#optional-parameters","text":"Parameter Description Type Default direction Expansion direction. Can be 'down', 'up', 'left' or 'right'. str down inactiveColour Default colour when not pressed or hovered over. (int, int, int) (150, 150, 150) pressedColour Colour when pressed. (int, int, int) (100, 100, 100) hoverColour Colour when hovered over. (int, int, int) (125, 125, 125) maxChoices Maximum number of choices to display int len(choices) searchAlgo Algorithm to be used to search through choices. function(str, list) -> list ComboBox._defaultSearch onSelected Function to be called when a search choice is selected. function None onSelectedParams Parameters to be fed into onSelected function. (*any) () onStartSearch Function to be called when a search is started by user (clicking on the search box). function None onStartSearchParams Parameters to be fed into onStartSearch function. (*any) () onStopSearch Function to be called when a search is stopped (clicking outside the search dropdown, or selecting a choice). function None onStopSearchParams Parameters to be fed into onStopSearch function. (*any) () textColour Colour of text. (int, int, int) (0, 0, 0) fontSize Size of text. int 20 font Font of text. pygame.font.Font sans-serif textHAlign Horizontal alignment of text. Can be 'centre', 'left' or 'right'. str 'centre' borderColour Colour of border. (int, int, int) (0, 0, 0) borderThickness Thickness of border. int 3 borderRadius Border radius. Set to 0 for no radius. int 0 textboxKwargs Optional different parameters only for the TextBox . dict {}","title":"Optional Parameters"},{"location":"common/","text":"Common Functionality provided and required for all widgets. Mandatory Parameters Note: Mandatory parameters must be supplied in order. Parameter Description Type win Surface to be displayed on. pygame.Surface x X-coordinate of top left. int y Y-coordinate of top left. int width Width of button in pixels. int height Height of button in pixels. int","title":"Common"},{"location":"common/#common","text":"Functionality provided and required for all widgets.","title":"Common"},{"location":"common/#mandatory-parameters","text":"Note: Mandatory parameters must be supplied in order. Parameter Description Type win Surface to be displayed on. pygame.Surface x X-coordinate of top left. int y Y-coordinate of top left. int width Width of button in pixels. int height Height of button in pixels. int","title":"Mandatory Parameters"},{"location":"dropdown/","text":"Dropdown A dropdown menu allowing the selection of various elements. import pygame from pygame_widgets import Button, Dropdown pygame.init() win = pygame.display.set_mode((400, 280)) dropdown = Dropdown( win, 120, 10, 100, 50, name='Select Color', choices=[ 'Red', 'Blue', 'Yellow', ], borderRadius=3, colour=pygame.Color('green'), values=[1, 2, 'true'], direction='down', textHAlign='left' ) def print_value(): print(dropdown.getSelected()) button = Button( win, 10, 10, 100, 50, text='Print Value', fontSize=30, margin=20, inactiveColour=(255, 0, 0), pressedColour=(0, 255, 0), radius=5, onClick=print_value, font=pygame.font.SysFont('calibri', 10), textVAlign='bottom' ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) dropdown.listen(events) dropdown.draw() button.listen(events) button.draw() pygame.display.update() This is a classic dropdown, but with a twist: if you right-click on the top, it reset itself. To get the current value of the dropdown, we use the getSelected() methods. It returns: None if nothing is selected A string with the choice you selected if the optional arg value is not set If the optional arg value is set, we return the value corresponding to the choice. For the example above: Choice Value Red 1 Blue 2 Yellow 3 Mandatory Parameters Note: Mandatory parameters must be supplied in order. Parameter Description Type name Main name of the dropdown str choices Choices to display list of str Optional Parameters Parameter Description Type Default direction Expansion direction. Can be 'down', 'up', 'left' or 'right'. str down values optional return value corresponding to the choices. Must be the same length as choices list a copy of choices inactiveColour Default colour when not pressed or hovered over. (int, int, int) (150, 150, 150) pressedColour Colour when pressed. (int, int, int) (100, 100, 100) hoverColour Colour when hovered over. (int, int, int) (125, 125, 125) onClick Function to be called when clicked. function None onClickParams Parameters to be fed into onClick function. (*any) () onRelease Function to be called when released. function None onReleaseParams Parameters to be fed into onRelease function. (*any) () textColour Colour of text. (int, int, int) (0, 0, 0) fontSize Size of text. int 20 font Font of text. pygame.font.Font sans-serif textHAlign Horizontal alignment of text. Can be 'centre', 'left' or 'right'. str 'centre' borderColour Colour of border. (int, int, int) (0, 0, 0) borderThickness Thickness of border. int 3 borderRadius Border radius. Set to 0 for no radius. int 0","title":"Dropdown"},{"location":"dropdown/#dropdown","text":"A dropdown menu allowing the selection of various elements. import pygame from pygame_widgets import Button, Dropdown pygame.init() win = pygame.display.set_mode((400, 280)) dropdown = Dropdown( win, 120, 10, 100, 50, name='Select Color', choices=[ 'Red', 'Blue', 'Yellow', ], borderRadius=3, colour=pygame.Color('green'), values=[1, 2, 'true'], direction='down', textHAlign='left' ) def print_value(): print(dropdown.getSelected()) button = Button( win, 10, 10, 100, 50, text='Print Value', fontSize=30, margin=20, inactiveColour=(255, 0, 0), pressedColour=(0, 255, 0), radius=5, onClick=print_value, font=pygame.font.SysFont('calibri', 10), textVAlign='bottom' ) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) dropdown.listen(events) dropdown.draw() button.listen(events) button.draw() pygame.display.update() This is a classic dropdown, but with a twist: if you right-click on the top, it reset itself. To get the current value of the dropdown, we use the getSelected() methods. It returns: None if nothing is selected A string with the choice you selected if the optional arg value is not set If the optional arg value is set, we return the value corresponding to the choice. For the example above: Choice Value Red 1 Blue 2 Yellow 3","title":"Dropdown"},{"location":"dropdown/#mandatory-parameters","text":"Note: Mandatory parameters must be supplied in order. Parameter Description Type name Main name of the dropdown str choices Choices to display list of str","title":"Mandatory Parameters"},{"location":"dropdown/#optional-parameters","text":"Parameter Description Type Default direction Expansion direction. Can be 'down', 'up', 'left' or 'right'. str down values optional return value corresponding to the choices. Must be the same length as choices list a copy of choices inactiveColour Default colour when not pressed or hovered over. (int, int, int) (150, 150, 150) pressedColour Colour when pressed. (int, int, int) (100, 100, 100) hoverColour Colour when hovered over. (int, int, int) (125, 125, 125) onClick Function to be called when clicked. function None onClickParams Parameters to be fed into onClick function. (*any) () onRelease Function to be called when released. function None onReleaseParams Parameters to be fed into onRelease function. (*any) () textColour Colour of text. (int, int, int) (0, 0, 0) fontSize Size of text. int 20 font Font of text. pygame.font.Font sans-serif textHAlign Horizontal alignment of text. Can be 'centre', 'left' or 'right'. str 'centre' borderColour Colour of border. (int, int, int) (0, 0, 0) borderThickness Thickness of border. int 3 borderRadius Border radius. Set to 0 for no radius. int 0","title":"Optional Parameters"},{"location":"progressbar/","text":"Progress Bar Displays a continuously changing percentage Example Usage import pygame import time from pygame_widgets import ProgressBar startTime = time.time() pygame.init() win = pygame.display.set_mode((1000, 600)) progressBar = ProgressBar(win, 100, 100, 500, 40, lambda: 1 - (time.time() - startTime) / 10, curved=True) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) progressBar.draw() pygame.display.update() This progress bar uses time to fill up, however, the progress function can be replaced by any other function call that provides a percentage. Mandatory Parameters Parameter Description Type progress Function that defines the percentage of the bar filled. function -> float Optional Parameters Parameter Description Type Default curved Adds curved ends to the progress bar. bool False completedColour Colour of completed section of progress bar. (int, int, int) (0, 200, 0) incompletedColour Colour of incompleted section of progress bar. (int, int, int) (100, 100, 100)","title":"Progress Bar"},{"location":"progressbar/#progress-bar","text":"Displays a continuously changing percentage","title":"Progress Bar"},{"location":"progressbar/#example-usage","text":"import pygame import time from pygame_widgets import ProgressBar startTime = time.time() pygame.init() win = pygame.display.set_mode((1000, 600)) progressBar = ProgressBar(win, 100, 100, 500, 40, lambda: 1 - (time.time() - startTime) / 10, curved=True) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) progressBar.draw() pygame.display.update() This progress bar uses time to fill up, however, the progress function can be replaced by any other function call that provides a percentage.","title":"Example Usage"},{"location":"progressbar/#mandatory-parameters","text":"Parameter Description Type progress Function that defines the percentage of the bar filled. function -> float","title":"Mandatory Parameters"},{"location":"progressbar/#optional-parameters","text":"Parameter Description Type Default curved Adds curved ends to the progress bar. bool False completedColour Colour of completed section of progress bar. (int, int, int) (0, 200, 0) incompletedColour Colour of incompleted section of progress bar. (int, int, int) (100, 100, 100)","title":"Optional Parameters"},{"location":"slider/","text":"Slider A slider for discrete numeric value selection Example Usage import pygame from pygame_widgets import Slider, TextBox pygame.init() win = pygame.display.set_mode((1000, 600)) slider = Slider(win, 100, 100, 800, 40, min=0, max=99, step=1) output = TextBox(win, 475, 200, 50, 50, fontSize=30) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) slider.listen(events) slider.draw() output.setText(slider.getValue()) output.draw() pygame.display.update() As you can see, TextBox can be used to display text as well, by not calling its listen method. Optional Parameters Parameter Description Type Default min Minimum value of the slider (left). int or float 0 max Maximum value of the slider (right). int or float 99 step Value to increment by. int or float 1 colour Colour of slider. (int, int, int) (200, 200, 200) handleColour Colour of handle. (int, int, int) (0, 0, 0) initial Initial value of the slider. int or float Average of min and max handleRadius Radius of handle. int height / 1.3 curved Add curved ends to the slider. bool True","title":"Slider"},{"location":"slider/#slider","text":"A slider for discrete numeric value selection","title":"Slider"},{"location":"slider/#example-usage","text":"import pygame from pygame_widgets import Slider, TextBox pygame.init() win = pygame.display.set_mode((1000, 600)) slider = Slider(win, 100, 100, 800, 40, min=0, max=99, step=1) output = TextBox(win, 475, 200, 50, 50, fontSize=30) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) slider.listen(events) slider.draw() output.setText(slider.getValue()) output.draw() pygame.display.update() As you can see, TextBox can be used to display text as well, by not calling its listen method.","title":"Example Usage"},{"location":"slider/#optional-parameters","text":"Parameter Description Type Default min Minimum value of the slider (left). int or float 0 max Maximum value of the slider (right). int or float 99 step Value to increment by. int or float 1 colour Colour of slider. (int, int, int) (200, 200, 200) handleColour Colour of handle. (int, int, int) (0, 0, 0) initial Initial value of the slider. int or float Average of min and max handleRadius Radius of handle. int height / 1.3 curved Add curved ends to the slider. bool True","title":"Optional Parameters"},{"location":"textbox/","text":"TextBox A box for text input or display Example Usage import pygame from pygame_widgets import TextBox def output(): # Get text in the textbox print(textbox.getText()) pygame.init() win = pygame.display.set_mode((1000, 600)) textbox = TextBox(win, 100, 100, 800, 80, fontSize=50, borderColour=(255, 0, 0), textColour=(0, 200, 0), onSubmit=output, radius=10, borderThickness=5) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) textbox.listen(events) textbox.draw() pygame.display.update() Optional Parameters Parameter Description Type Default colour Background colour. (int, int, int) (220, 220, 220) textColour Colour of text. (int, int, int) (0, 0, 0) borderColour Colour of border. (int, int, int) (0, 0, 0) borderThickness Thickness of border. int 3 radius Border radius. Set to 0 for no radius. int 0 onSubmit Function to be called when return / enter is pressed. function None onSubmitParams Parameters to be fed into onSubmit function. (*any) () onTextChanged Function to be called when the text in the box is changed. function None onTextChangedParams Parameters to be fed into onTextChanged function. (*any) () placeholderText Text to be displayed when empty. str '' fontSize Size of text. int 20 font Font of text. pygame.font.Font Calibri","title":"TextBox"},{"location":"textbox/#textbox","text":"A box for text input or display","title":"TextBox"},{"location":"textbox/#example-usage","text":"import pygame from pygame_widgets import TextBox def output(): # Get text in the textbox print(textbox.getText()) pygame.init() win = pygame.display.set_mode((1000, 600)) textbox = TextBox(win, 100, 100, 800, 80, fontSize=50, borderColour=(255, 0, 0), textColour=(0, 200, 0), onSubmit=output, radius=10, borderThickness=5) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) textbox.listen(events) textbox.draw() pygame.display.update()","title":"Example Usage"},{"location":"textbox/#optional-parameters","text":"Parameter Description Type Default colour Background colour. (int, int, int) (220, 220, 220) textColour Colour of text. (int, int, int) (0, 0, 0) borderColour Colour of border. (int, int, int) (0, 0, 0) borderThickness Thickness of border. int 3 radius Border radius. Set to 0 for no radius. int 0 onSubmit Function to be called when return / enter is pressed. function None onSubmitParams Parameters to be fed into onSubmit function. (*any) () onTextChanged Function to be called when the text in the box is changed. function None onTextChangedParams Parameters to be fed into onTextChanged function. (*any) () placeholderText Text to be displayed when empty. str '' fontSize Size of text. int 20 font Font of text. pygame.font.Font Calibri","title":"Optional Parameters"},{"location":"toggle/","text":"Toggle Allows switching between true and false options Example Usage import pygame from pygame_widgets import Toggle pygame.init() win = pygame.display.set_mode((1000, 600)) toggle = Toggle(win, 100, 100, 100, 40) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) toggle.listen(events) toggle.draw() pygame.display.update() Optional Parameters Parameter Description Type Default startOn Default value. bool False onColour Colour of toggle when on. (int, int, int) (141, 185, 244) offColour Colour of toggle when off. (int, int, int) (150, 150, 150) handleOnColour Thickness of toggle handle when on. (int, int, int) (26, 115, 232) handleOffColour Thickness of toggle handle when off. (int, int, int) (200, 200, 200) handleRadius Radius of handle. int height / 1.3","title":"Toggle"},{"location":"toggle/#toggle","text":"Allows switching between true and false options","title":"Toggle"},{"location":"toggle/#example-usage","text":"import pygame from pygame_widgets import Toggle pygame.init() win = pygame.display.set_mode((1000, 600)) toggle = Toggle(win, 100, 100, 100, 40) run = True while run: events = pygame.event.get() for event in events: if event.type == pygame.QUIT: pygame.quit() run = False quit() win.fill((255, 255, 255)) toggle.listen(events) toggle.draw() pygame.display.update()","title":"Example Usage"},{"location":"toggle/#optional-parameters","text":"Parameter Description Type Default startOn Default value. bool False onColour Colour of toggle when on. (int, int, int) (141, 185, 244) offColour Colour of toggle when off. (int, int, int) (150, 150, 150) handleOnColour Thickness of toggle handle when on. (int, int, int) (26, 115, 232) handleOffColour Thickness of toggle handle when off. (int, int, int) (200, 200, 200) handleRadius Radius of handle. int height / 1.3","title":"Optional Parameters"}]}